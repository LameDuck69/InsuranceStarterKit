// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Pocos
{

    // CountryInRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CountryInRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryInRegion>
    {
        public CountryInRegionConfiguration()
            : this("dbo")
        {
        }

        public CountryInRegionConfiguration(string schema)
        {
            ToTable("CountryInRegion", schema);
            HasKey(x => new { x.GlobalRegionId, x.CountryId, x.RegionSetId });

            Property(x => x.GlobalRegionId).HasColumnName(@"GlobalRegionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RegionSetId).HasColumnName(@"RegionSetID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Country).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // FK_CountryInRegion_Country
            HasRequired(a => a.GlobalRegion).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.GlobalRegionId).WillCascadeOnDelete(false); // FK_CountryInRegion_GlobalRegion
            HasRequired(a => a.GlobalRegionSet).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.RegionSetId).WillCascadeOnDelete(false); // FK_CountryInRegion_GlobalRegionSet
        }
    }

}
// </auto-generated>
