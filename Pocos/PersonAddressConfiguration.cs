// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Pocos
{

    // PersonAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonAddress>
    {
        public PersonAddressConfiguration()
            : this("dbo")
        {
        }

        public PersonAddressConfiguration(string schema)
        {
            ToTable("PersonAddress", schema);
            HasKey(x => new { x.PersonId, x.AddressId, x.AddressTypeId });

            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.AddressId).WillCascadeOnDelete(false); // FK_PersonAddress_Address
            HasRequired(a => a.AddressType).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_PersonAddress_AddressType
            HasRequired(a => a.Person).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonAddress_Person
        }
    }

}
// </auto-generated>
