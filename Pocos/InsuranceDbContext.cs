// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Pocos
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class InsuranceDbContext : System.Data.Entity.DbContext, IInsuranceDbContext
    {
        public System.Data.Entity.DbSet<AddOn> AddOns { get; set; } // AddOn
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Answer> Answers { get; set; } // Answer
        public System.Data.Entity.DbSet<CommunicationType> CommunicationTypes { get; set; } // CommunicationType
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<CountryInRegion> CountryInRegions { get; set; } // CountryInRegion
        public System.Data.Entity.DbSet<County> Counties { get; set; } // County
        public System.Data.Entity.DbSet<CustomerCommunication> CustomerCommunications { get; set; } // CustomerCommunication
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; } // EmailAddressType
        public System.Data.Entity.DbSet<GlobalRegion> GlobalRegions { get; set; } // GlobalRegion
        public System.Data.Entity.DbSet<GlobalRegionSet> GlobalRegionSets { get; set; } // GlobalRegionSet
        public System.Data.Entity.DbSet<Login> Logins { get; set; } // Login
        public System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; } // PersonAddress
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; } // PersonEmailAddress
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; } // PersonLogin
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; } // PersonPassword
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; } // PhoneNumber
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Policy> Policies { get; set; } // Policy
        public System.Data.Entity.DbSet<PolicyAmendment> PolicyAmendments { get; set; } // PolicyAmendment
        public System.Data.Entity.DbSet<PolicyAmentmentType> PolicyAmentmentTypes { get; set; } // PolicyAmentmentType
        public System.Data.Entity.DbSet<PolicyDefinition> PolicyDefinitions { get; set; } // PolicyDefinition
        public System.Data.Entity.DbSet<PolicyType> PolicyTypes { get; set; } // PolicyType
        public System.Data.Entity.DbSet<Provider> Providers { get; set; } // Provider
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QuestionMultiChoice> QuestionMultiChoices { get; set; } // QuestionMultiChoice
        public System.Data.Entity.DbSet<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; } // QuestionMultipleChoiceGroup
        public System.Data.Entity.DbSet<QuestionRange> QuestionRanges { get; set; } // QuestionRange
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; } // QuestionType
        public System.Data.Entity.DbSet<RatingBaseRate> RatingBaseRates { get; set; } // RatingBaseRate
        public System.Data.Entity.DbSet<RatingFactor> RatingFactors { get; set; } // RatingFactor
        public System.Data.Entity.DbSet<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // RatingFactorOnPolicy
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        public System.Data.Entity.DbSet<Salutation> Salutations { get; set; } // Salutation
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; } // TargetSystem
        public System.Data.Entity.DbSet<Town> Towns { get; set; } // Town

        static InsuranceDbContext()
        {
            System.Data.Entity.Database.SetInitializer<InsuranceDbContext>(null);
        }

        public InsuranceDbContext()
            : base("Name=InsuranceStarterKit")
        {
        }

        public InsuranceDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public InsuranceDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public InsuranceDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public InsuranceDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddOnConfiguration());
            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AnswerConfiguration());
            modelBuilder.Configurations.Add(new CommunicationTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountryInRegionConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new CustomerCommunicationConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration());
            modelBuilder.Configurations.Add(new GlobalRegionConfiguration());
            modelBuilder.Configurations.Add(new GlobalRegionSetConfiguration());
            modelBuilder.Configurations.Add(new LoginConfiguration());
            modelBuilder.Configurations.Add(new PasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonLoginConfiguration());
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new PolicyConfiguration());
            modelBuilder.Configurations.Add(new PolicyAmendmentConfiguration());
            modelBuilder.Configurations.Add(new PolicyAmentmentTypeConfiguration());
            modelBuilder.Configurations.Add(new PolicyDefinitionConfiguration());
            modelBuilder.Configurations.Add(new PolicyTypeConfiguration());
            modelBuilder.Configurations.Add(new ProviderConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new QuestionMultiChoiceConfiguration());
            modelBuilder.Configurations.Add(new QuestionMultipleChoiceGroupConfiguration());
            modelBuilder.Configurations.Add(new QuestionRangeConfiguration());
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration());
            modelBuilder.Configurations.Add(new RatingBaseRateConfiguration());
            modelBuilder.Configurations.Add(new RatingFactorConfiguration());
            modelBuilder.Configurations.Add(new RatingFactorOnPolicyConfiguration());
            modelBuilder.Configurations.Add(new RefactorLogConfiguration());
            modelBuilder.Configurations.Add(new SalutationConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TargetSystemConfiguration());
            modelBuilder.Configurations.Add(new TownConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddOnConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunicationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryInRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CountyConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerCommunicationConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GlobalRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new GlobalRegionSetConfiguration(schema));
            modelBuilder.Configurations.Add(new LoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyAmendmentConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyAmentmentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyDefinitionConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionMultiChoiceConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionMultipleChoiceGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionRangeConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingBaseRateConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingFactorConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingFactorOnPolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new RefactorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SalutationConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetSystemConfiguration(schema));
            modelBuilder.Configurations.Add(new TownConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
