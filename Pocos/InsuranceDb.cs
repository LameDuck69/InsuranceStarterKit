

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Pocos\App.config"
//     Connection String Name: "InsuranceStarterKit"
//     Connection String:      "data source=DESKTOP-SKD9D95\SQLEXPRESS;initial catalog=Osip;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Pocos
{
    using System.Linq;

    #region Unit of work

    public interface IInsuranceDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AddOn> AddOns { get; set; } // AddOn
        System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<Answer> Answers { get; set; } // Answer
        System.Data.Entity.DbSet<CommunicationType> CommunicationTypes { get; set; } // CommunicationType
        System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        System.Data.Entity.DbSet<CountryInRegion> CountryInRegions { get; set; } // CountryInRegion
        System.Data.Entity.DbSet<County> Counties { get; set; } // County
        System.Data.Entity.DbSet<CustomerCommunication> CustomerCommunications { get; set; } // CustomerCommunication
        System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; } // EmailAddressType
        System.Data.Entity.DbSet<GlobalRegion> GlobalRegions { get; set; } // GlobalRegion
        System.Data.Entity.DbSet<GlobalRegionSet> GlobalRegionSets { get; set; } // GlobalRegionSet
        System.Data.Entity.DbSet<Login> Logins { get; set; } // Login
        System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        System.Data.Entity.DbSet<Person> People { get; set; } // Person
        System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; } // PersonAddress
        System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; } // PersonEmailAddress
        System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; } // PersonLogin
        System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; } // PersonPassword
        System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; } // PhoneNumber
        System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        System.Data.Entity.DbSet<Policy> Policies { get; set; } // Policy
        System.Data.Entity.DbSet<PolicyAmendment> PolicyAmendments { get; set; } // PolicyAmendment
        System.Data.Entity.DbSet<PolicyAmentmentType> PolicyAmentmentTypes { get; set; } // PolicyAmentmentType
        System.Data.Entity.DbSet<PolicyDefinition> PolicyDefinitions { get; set; } // PolicyDefinition
        System.Data.Entity.DbSet<PolicyType> PolicyTypes { get; set; } // PolicyType
        System.Data.Entity.DbSet<Provider> Providers { get; set; } // Provider
        System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        System.Data.Entity.DbSet<QuestionMultiChoice> QuestionMultiChoices { get; set; } // QuestionMultiChoice
        System.Data.Entity.DbSet<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; } // QuestionMultipleChoiceGroup
        System.Data.Entity.DbSet<QuestionRange> QuestionRanges { get; set; } // QuestionRange
        System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; } // QuestionType
        System.Data.Entity.DbSet<RatingBaseRate> RatingBaseRates { get; set; } // RatingBaseRate
        System.Data.Entity.DbSet<RatingFactor> RatingFactors { get; set; } // RatingFactor
        System.Data.Entity.DbSet<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // RatingFactorOnPolicy
        System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        System.Data.Entity.DbSet<Salutation> Salutations { get; set; } // Salutation
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; } // TargetSystem
        System.Data.Entity.DbSet<Town> Towns { get; set; } // Town

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class InsuranceDbContext : System.Data.Entity.DbContext, IInsuranceDbContext
    {
        public System.Data.Entity.DbSet<AddOn> AddOns { get; set; } // AddOn
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Answer> Answers { get; set; } // Answer
        public System.Data.Entity.DbSet<CommunicationType> CommunicationTypes { get; set; } // CommunicationType
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<CountryInRegion> CountryInRegions { get; set; } // CountryInRegion
        public System.Data.Entity.DbSet<County> Counties { get; set; } // County
        public System.Data.Entity.DbSet<CustomerCommunication> CustomerCommunications { get; set; } // CustomerCommunication
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; } // EmailAddressType
        public System.Data.Entity.DbSet<GlobalRegion> GlobalRegions { get; set; } // GlobalRegion
        public System.Data.Entity.DbSet<GlobalRegionSet> GlobalRegionSets { get; set; } // GlobalRegionSet
        public System.Data.Entity.DbSet<Login> Logins { get; set; } // Login
        public System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; } // PersonAddress
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; } // PersonEmailAddress
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; } // PersonLogin
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; } // PersonPassword
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; } // PhoneNumber
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Policy> Policies { get; set; } // Policy
        public System.Data.Entity.DbSet<PolicyAmendment> PolicyAmendments { get; set; } // PolicyAmendment
        public System.Data.Entity.DbSet<PolicyAmentmentType> PolicyAmentmentTypes { get; set; } // PolicyAmentmentType
        public System.Data.Entity.DbSet<PolicyDefinition> PolicyDefinitions { get; set; } // PolicyDefinition
        public System.Data.Entity.DbSet<PolicyType> PolicyTypes { get; set; } // PolicyType
        public System.Data.Entity.DbSet<Provider> Providers { get; set; } // Provider
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QuestionMultiChoice> QuestionMultiChoices { get; set; } // QuestionMultiChoice
        public System.Data.Entity.DbSet<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; } // QuestionMultipleChoiceGroup
        public System.Data.Entity.DbSet<QuestionRange> QuestionRanges { get; set; } // QuestionRange
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; } // QuestionType
        public System.Data.Entity.DbSet<RatingBaseRate> RatingBaseRates { get; set; } // RatingBaseRate
        public System.Data.Entity.DbSet<RatingFactor> RatingFactors { get; set; } // RatingFactor
        public System.Data.Entity.DbSet<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // RatingFactorOnPolicy
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        public System.Data.Entity.DbSet<Salutation> Salutations { get; set; } // Salutation
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; } // TargetSystem
        public System.Data.Entity.DbSet<Town> Towns { get; set; } // Town

        static InsuranceDbContext()
        {
            System.Data.Entity.Database.SetInitializer<InsuranceDbContext>(null);
        }

        public InsuranceDbContext()
            : base("Name=InsuranceStarterKit")
        {
        }

        public InsuranceDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public InsuranceDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public InsuranceDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public InsuranceDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddOnConfiguration());
            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new AnswerConfiguration());
            modelBuilder.Configurations.Add(new CommunicationTypeConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountryInRegionConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new CustomerCommunicationConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration());
            modelBuilder.Configurations.Add(new GlobalRegionConfiguration());
            modelBuilder.Configurations.Add(new GlobalRegionSetConfiguration());
            modelBuilder.Configurations.Add(new LoginConfiguration());
            modelBuilder.Configurations.Add(new PasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonLoginConfiguration());
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new PolicyConfiguration());
            modelBuilder.Configurations.Add(new PolicyAmendmentConfiguration());
            modelBuilder.Configurations.Add(new PolicyAmentmentTypeConfiguration());
            modelBuilder.Configurations.Add(new PolicyDefinitionConfiguration());
            modelBuilder.Configurations.Add(new PolicyTypeConfiguration());
            modelBuilder.Configurations.Add(new ProviderConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new QuestionMultiChoiceConfiguration());
            modelBuilder.Configurations.Add(new QuestionMultipleChoiceGroupConfiguration());
            modelBuilder.Configurations.Add(new QuestionRangeConfiguration());
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration());
            modelBuilder.Configurations.Add(new RatingBaseRateConfiguration());
            modelBuilder.Configurations.Add(new RatingFactorConfiguration());
            modelBuilder.Configurations.Add(new RatingFactorOnPolicyConfiguration());
            modelBuilder.Configurations.Add(new RefactorLogConfiguration());
            modelBuilder.Configurations.Add(new SalutationConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TargetSystemConfiguration());
            modelBuilder.Configurations.Add(new TownConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddOnConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new AnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new CommunicationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryInRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new CountyConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerCommunicationConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GlobalRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new GlobalRegionSetConfiguration(schema));
            modelBuilder.Configurations.Add(new LoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyAmendmentConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyAmentmentTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyDefinitionConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProviderConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionMultiChoiceConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionMultipleChoiceGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionRangeConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingBaseRateConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingFactorConfiguration(schema));
            modelBuilder.Configurations.Add(new RatingFactorOnPolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new RefactorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SalutationConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetSystemConfiguration(schema));
            modelBuilder.Configurations.Add(new TownConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeInsuranceDbContext : IInsuranceDbContext
    {
        public System.Data.Entity.DbSet<AddOn> AddOns { get; set; }
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Answer> Answers { get; set; }
        public System.Data.Entity.DbSet<CommunicationType> CommunicationTypes { get; set; }
        public System.Data.Entity.DbSet<Country> Countries { get; set; }
        public System.Data.Entity.DbSet<CountryInRegion> CountryInRegions { get; set; }
        public System.Data.Entity.DbSet<County> Counties { get; set; }
        public System.Data.Entity.DbSet<CustomerCommunication> CustomerCommunications { get; set; }
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; }
        public System.Data.Entity.DbSet<GlobalRegion> GlobalRegions { get; set; }
        public System.Data.Entity.DbSet<GlobalRegionSet> GlobalRegionSets { get; set; }
        public System.Data.Entity.DbSet<Login> Logins { get; set; }
        public System.Data.Entity.DbSet<Password> Passwords { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; }
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; }
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; }
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Policy> Policies { get; set; }
        public System.Data.Entity.DbSet<PolicyAmendment> PolicyAmendments { get; set; }
        public System.Data.Entity.DbSet<PolicyAmentmentType> PolicyAmentmentTypes { get; set; }
        public System.Data.Entity.DbSet<PolicyDefinition> PolicyDefinitions { get; set; }
        public System.Data.Entity.DbSet<PolicyType> PolicyTypes { get; set; }
        public System.Data.Entity.DbSet<Provider> Providers { get; set; }
        public System.Data.Entity.DbSet<Question> Questions { get; set; }
        public System.Data.Entity.DbSet<QuestionMultiChoice> QuestionMultiChoices { get; set; }
        public System.Data.Entity.DbSet<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; }
        public System.Data.Entity.DbSet<QuestionRange> QuestionRanges { get; set; }
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; }
        public System.Data.Entity.DbSet<RatingBaseRate> RatingBaseRates { get; set; }
        public System.Data.Entity.DbSet<RatingFactor> RatingFactors { get; set; }
        public System.Data.Entity.DbSet<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }
        public System.Data.Entity.DbSet<Salutation> Salutations { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; }
        public System.Data.Entity.DbSet<Town> Towns { get; set; }

        public FakeInsuranceDbContext()
        {
            AddOns = new FakeDbSet<AddOn>("Id");
            Addresses = new FakeDbSet<Address>("Id");
            AddressTypes = new FakeDbSet<AddressType>("Id");
            Answers = new FakeDbSet<Answer>("Id");
            CommunicationTypes = new FakeDbSet<CommunicationType>("Id");
            Countries = new FakeDbSet<Country>("Id");
            CountryInRegions = new FakeDbSet<CountryInRegion>("GlobalRegionId", "CountryId", "RegionSetId");
            Counties = new FakeDbSet<County>("Id");
            CustomerCommunications = new FakeDbSet<CustomerCommunication>("Id");
            EmailAddresses = new FakeDbSet<EmailAddress>("Id");
            EmailAddressTypes = new FakeDbSet<EmailAddressType>("Id");
            GlobalRegions = new FakeDbSet<GlobalRegion>("Id");
            GlobalRegionSets = new FakeDbSet<GlobalRegionSet>("Id");
            Logins = new FakeDbSet<Login>("Id");
            Passwords = new FakeDbSet<Password>("Id");
            People = new FakeDbSet<Person>("Id");
            PersonAddresses = new FakeDbSet<PersonAddress>("PersonId", "AddressId", "AddressTypeId");
            PersonEmailAddresses = new FakeDbSet<PersonEmailAddress>("EmailAddressId", "PersonId", "EmailAddressTypeId");
            PersonLogins = new FakeDbSet<PersonLogin>("PersonId", "LoginId", "TargetSystemId");
            PersonPasswords = new FakeDbSet<PersonPassword>("PersonId", "PasswordId", "TargetSystemId");
            PersonPhones = new FakeDbSet<PersonPhone>("PersonId", "PhoneNumberId", "PhoneNumberTypeId");
            PhoneNumbers = new FakeDbSet<PhoneNumber>("Id");
            PhoneNumberTypes = new FakeDbSet<PhoneNumberType>("Id");
            Policies = new FakeDbSet<Policy>("Id");
            PolicyAmendments = new FakeDbSet<PolicyAmendment>("Id");
            PolicyAmentmentTypes = new FakeDbSet<PolicyAmentmentType>("Id");
            PolicyDefinitions = new FakeDbSet<PolicyDefinition>("Id");
            PolicyTypes = new FakeDbSet<PolicyType>("Id");
            Providers = new FakeDbSet<Provider>("Id");
            Questions = new FakeDbSet<Question>("Id");
            QuestionMultiChoices = new FakeDbSet<QuestionMultiChoice>("Id");
            QuestionMultipleChoiceGroups = new FakeDbSet<QuestionMultipleChoiceGroup>("QuestionId", "QuestionMultipleChoiceId");
            QuestionRanges = new FakeDbSet<QuestionRange>("Id");
            QuestionTypes = new FakeDbSet<QuestionType>("Id");
            RatingBaseRates = new FakeDbSet<RatingBaseRate>("Id");
            RatingFactors = new FakeDbSet<RatingFactor>("Id");
            RatingFactorOnPolicies = new FakeDbSet<RatingFactorOnPolicy>("AnswerId", "PolicyId", "RatingFactorId");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
            Salutations = new FakeDbSet<Salutation>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TargetSystems = new FakeDbSet<TargetSystem>("Id");
            Towns = new FakeDbSet<Town>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AddOn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddOn
    {
        public int Id { get; set; } // ID (Primary key)
        public string AddOnName { get; set; } // AddOnName (length: 30)
        public decimal? OneOffCost { get; set; } // OneOffCost
        public decimal? PercentPerPersonOrItemCovered { get; set; } // PercentPerPersonOrItemCovered
        public string PercentagePerPremium { get; set; } // PercentagePerPremium (length: 10)
        public decimal? PercentagePayableCommision { get; set; } // PercentagePayableCommision
        public int? ProviderId { get; set; } // ProviderID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Policy> Policies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PolicyDefinition> PolicyDefinitions { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Provider Provider { get; set; } // FK_AddOn_Provider

        public AddOn()
        {
            PolicyDefinitions = new System.Collections.Generic.List<PolicyDefinition>();
            Policies = new System.Collections.Generic.List<Policy>();
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Address
    {
        public int Id { get; set; } // ID (Primary key)
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public int CityId { get; set; } // CityID
        public int CountyId { get; set; } // CountyID
        public int CountryId { get; set; } // CountryID
        public string PostCode { get; set; } // PostCode (length: 15)
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate
        public string ModifiedBy { get; set; } // ModifiedBy (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonAddress> PersonAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Policy> Policies { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Country Country { get; set; } // FK_Address_Country
        public virtual County County { get; set; } // FK_Address_County
        public virtual Town Town { get; set; } // FK_Address_City

        public Address()
        {
            ModifiedDate = System.DateTime.Now;
            PersonAddresses = new System.Collections.Generic.List<PersonAddress>();
            Policies = new System.Collections.Generic.List<Policy>();
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddressType
    {
        public int Id { get; set; } // ID (Primary key)
        public string AddressTypeName { get; set; } // AddressTypeName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonAddress> PersonAddresses { get; set; } // Many to many mapping

        public AddressType()
        {
            PersonAddresses = new System.Collections.Generic.List<PersonAddress>();
        }
    }

    // Answer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Answer
    {
        public int Id { get; set; } // ID (Primary key)
        public string AnswerAsString { get; set; } // AnswerAsString
        public int QuestionId { get; set; } // QuestionID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Policy> Policies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<QuestionRange> QuestionRanges { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Question Question { get; set; } // FK_Answer_Question

        public Answer()
        {
            RatingFactorOnPolicies = new System.Collections.Generic.List<RatingFactorOnPolicy>();
            QuestionRanges = new System.Collections.Generic.List<QuestionRange>();
            Policies = new System.Collections.Generic.List<Policy>();
        }
    }

    // CommunicationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CommunicationType
    {
        public int Id { get; set; } // ID (Primary key)
        public string CommsTypeName { get; set; } // CommsTypeName (length: 20)
    }

    // Country
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Country
    {
        public int Id { get; set; } // ID (Primary key)
        public string CountryName { get; set; } // CountryName (length: 20)
        public string CountryCode { get; set; } // CountryCode (length: 3)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Address.FK_Address_Country
        public virtual System.Collections.Generic.ICollection<CountryInRegion> CountryInRegions { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Town> Towns { get; set; } // Many to many mapping

        public Country()
        {
            Addresses = new System.Collections.Generic.List<Address>();
            CountryInRegions = new System.Collections.Generic.List<CountryInRegion>();
            Towns = new System.Collections.Generic.List<Town>();
        }
    }

    // CountryInRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CountryInRegion
    {
        public int GlobalRegionId { get; set; } // GlobalRegionID (Primary key)
        public int CountryId { get; set; } // CountryID (Primary key)
        public int RegionSetId { get; set; } // RegionSetID (Primary key)

        // Foreign keys
        public virtual Country Country { get; set; } // FK_CountryInRegion_Country
        public virtual GlobalRegion GlobalRegion { get; set; } // FK_CountryInRegion_GlobalRegion
        public virtual GlobalRegionSet GlobalRegionSet { get; set; } // FK_CountryInRegion_GlobalRegionSet
    }

    // County
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class County
    {
        public int Id { get; set; } // ID (Primary key)
        public string CountyName { get; set; } // CountyName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Address.FK_Address_County

        public County()
        {
            Addresses = new System.Collections.Generic.List<Address>();
        }
    }

    // CustomerCommunication
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CustomerCommunication
    {
        public int Id { get; set; } // ID (Primary key)
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EmailAddress
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress_ { get; set; } // EmailAddress (length: 50)
        public string ModifiedBy { get; set; } // ModifiedBy (length: 20)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonEmailAddress> PersonEmailAddresses { get; set; } // Many to many mapping

        public EmailAddress()
        {
            ModifiedDate = System.DateTime.Now;
            PersonEmailAddresses = new System.Collections.Generic.List<PersonEmailAddress>();
        }
    }

    // EmailAddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EmailAddressType
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddresstypeName { get; set; } // EmailAddresstypeName (length: 30)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonEmailAddress> PersonEmailAddresses { get; set; } // Many to many mapping

        public EmailAddressType()
        {
            PersonEmailAddresses = new System.Collections.Generic.List<PersonEmailAddress>();
        }
    }

    // GlobalRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GlobalRegion
    {
        public int Id { get; set; } // ID (Primary key)
        public string RegionName { get; set; } // RegionName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CountryInRegion> CountryInRegions { get; set; } // Many to many mapping

        public GlobalRegion()
        {
            CountryInRegions = new System.Collections.Generic.List<CountryInRegion>();
        }
    }

    // GlobalRegionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GlobalRegionSet
    {
        public int Id { get; set; } // ID (Primary key)
        public string RegionSetName { get; set; } // RegionSetName (length: 10)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CountryInRegion> CountryInRegions { get; set; } // Many to many mapping

        public GlobalRegionSet()
        {
            CountryInRegions = new System.Collections.Generic.List<CountryInRegion>();
        }
    }

    // Login
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Login
    {
        public int Id { get; set; } // ID (Primary key)
        public string Login_ { get; set; } // Login (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonLogin> PersonLogins { get; set; } // Many to many mapping

        public Login()
        {
            PersonLogins = new System.Collections.Generic.List<PersonLogin>();
        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Password
    {
        public int Id { get; set; } // ID (Primary key)
        public string Password_ { get; set; } // Password (length: 128)
        public string ModifiedBy { get; set; } // ModifiedBy (length: 20)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonPassword> PersonPasswords { get; set; } // Many to many mapping

        public Password()
        {
            ModifiedDate = System.DateTime.Now;
            PersonPasswords = new System.Collections.Generic.List<PersonPassword>();
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person
    {
        public int Id { get; set; } // ID (Primary key)
        public string KnownAs { get; set; } // KnownAs (length: 40)
        public int Title { get; set; } // Title
        public string FirstName { get; set; } // FirstName (length: 40)
        public string MiddleName { get; set; } // MiddleName (length: 40)
        public string LastName { get; set; } // LastName (length: 40)
        public System.DateTime DoB { get; set; } // DoB
        public string PostNominalLetters { get; set; } // PostNominalLetters (length: 30)
        public int? PasswordId { get; set; } // PasswordID
        public string UserName { get; set; } // UserName (length: 2)
        public string ModifiedBy { get; set; } // ModifiedBy (length: 1)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonAddress> PersonAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonEmailAddress> PersonEmailAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonLogin> PersonLogins { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonPassword> PersonPasswords { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PersonPhone> PersonPhones { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Policy> Policies { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Salutation Salutation { get; set; } // FK_Person_Salutatiion

        public Person()
        {
            ModifiedDate = System.DateTime.Now;
            PersonAddresses = new System.Collections.Generic.List<PersonAddress>();
            PersonEmailAddresses = new System.Collections.Generic.List<PersonEmailAddress>();
            PersonLogins = new System.Collections.Generic.List<PersonLogin>();
            PersonPasswords = new System.Collections.Generic.List<PersonPassword>();
            PersonPhones = new System.Collections.Generic.List<PersonPhone>();
            Policies = new System.Collections.Generic.List<Policy>();
        }
    }

    // PersonAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonAddress
    {
        public int PersonId { get; set; } // PersonID (Primary key)
        public int AddressId { get; set; } // AddressID (Primary key)
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        // Foreign keys
        public virtual Address Address { get; set; } // FK_PersonAddress_Address
        public virtual AddressType AddressType { get; set; } // FK_PersonAddress_AddressType
        public virtual Person Person { get; set; } // FK_PersonAddress_Person
    }

    // PersonEmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonEmailAddress
    {
        public int EmailAddressId { get; set; } // EmailAddressID (Primary key)
        public int PersonId { get; set; } // PersonID (Primary key)
        public int EmailAddressTypeId { get; set; } // EmailAddressTypeID (Primary key)

        // Foreign keys
        public virtual EmailAddress EmailAddress { get; set; } // FK_PersonEmailAddress_EmailAddress
        public virtual EmailAddressType EmailAddressType { get; set; } // FK_PersonEmailAddress_EmailAddressType
        public virtual Person Person { get; set; } // FK_PersonEmailAddress_Person
    }

    // PersonLogin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonLogin
    {
        public int PersonId { get; set; } // PersonID (Primary key)
        public int LoginId { get; set; } // LoginID (Primary key)
        public int TargetSystemId { get; set; } // targetSystemID (Primary key)

        // Foreign keys
        public virtual Login Login { get; set; } // FK_PersonLogin_Login
        public virtual Person Person { get; set; } // FK_PersonLogin_Person
        public virtual TargetSystem TargetSystem { get; set; } // FK_PersonLogin_TargetSystem
    }

    // PersonPassword
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonPassword
    {
        public int PersonId { get; set; } // PersonID (Primary key)
        public int PasswordId { get; set; } // PasswordID (Primary key)
        public int TargetSystemId { get; set; } // TargetSystemID (Primary key)

        // Foreign keys
        public virtual Password Password { get; set; } // FK_PersonPassword_Password
        public virtual Person Person { get; set; } // FK_PersonPassword_Person
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonPhone
    {
        public int PersonId { get; set; } // PersonID (Primary key)
        public int PhoneNumberId { get; set; } // PhoneNumberID (Primary key)
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        // Foreign keys
        public virtual Person Person { get; set; } // FK_PersonPhone_Person
        public virtual PhoneNumber PhoneNumber { get; set; } // FK_PersonPhone_PhoneNumber
        public virtual PhoneNumberType PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType
    }

    // PhoneNumber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PhoneNumber
    {
        public int Id { get; set; } // ID (Primary key)
        public string PhoneNumber_ { get; set; } // PhoneNumber (length: 40)
        public string ModifiedBy { get; set; } // ModifiedBy (length: 20)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonPhone> PersonPhones { get; set; } // Many to many mapping

        public PhoneNumber()
        {
            ModifiedDate = System.DateTime.Now;
            PersonPhones = new System.Collections.Generic.List<PersonPhone>();
        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PhoneNumberType
    {
        public int Id { get; set; } // ID (Primary key)
        public string PhoneNumberTypeName { get; set; } // PhoneNumberTypeName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonPhone> PersonPhones { get; set; } // Many to many mapping

        public PhoneNumberType()
        {
            PersonPhones = new System.Collections.Generic.List<PersonPhone>();
        }
    }

    // Policy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Policy
    {
        public int Id { get; set; } // ID (Primary key)
        public int PurchaserId { get; set; } // PurchaserID
        public System.DateTime StartDate { get; set; } // StartDate
        public int? DurationInDays { get; set; } // DurationInDays
        public System.DateTime QuoteDate { get; set; } // QuoteDate
        public int PolicyDefinitionId { get; set; } // PolicyDefinitionID
        public decimal Premium { get; set; } // Premium
        public bool PolicyAutoRenew { get; set; } // PolicyAutoRenew
        public int SoldById { get; set; } // SoldByID

        ///<summary>
        /// 0 all docs and written comms via email - 1 using physical post
        ///</summary>
        public bool SnailMail { get; set; } // SnailMail

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AddOn> AddOns { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Answer> Answers { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Person> People { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PolicyAmendment> PolicyAmendments { get; set; } // PolicyAmendment.FK_PolicyAmendment_Policy
        public virtual System.Collections.Generic.ICollection<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // Many to many mapping

        // Foreign keys
        public virtual PolicyDefinition PolicyDefinition { get; set; } // FK_Policy_PolicyDefinition

        public Policy()
        {
            PolicyAutoRenew = true;
            SnailMail = false;
            PolicyAmendments = new System.Collections.Generic.List<PolicyAmendment>();
            RatingFactorOnPolicies = new System.Collections.Generic.List<RatingFactorOnPolicy>();
            People = new System.Collections.Generic.List<Person>();
            Addresses = new System.Collections.Generic.List<Address>();
            AddOns = new System.Collections.Generic.List<AddOn>();
            Answers = new System.Collections.Generic.List<Answer>();
        }
    }

    // PolicyAmendment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyAmendment
    {
        public int Id { get; set; } // ID (Primary key)
        public int PolicyId { get; set; } // PolicyID
        public System.DateTime AmendmentDate { get; set; } // AmendmentDate
        public int AmendmentTypeId { get; set; } // AmendmentTypeID
        public decimal PreviousPremium { get; set; } // PreviousPremium
        public int AmmendedById { get; set; } // AmmendedByID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Policy Policy { get; set; } // FK_PolicyAmendment_Policy
        public virtual PolicyAmentmentType PolicyAmentmentType { get; set; } // FK_PolicyAmendment_PolicyAmentmentType

        public PolicyAmendment()
        {
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // PolicyAmentmentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyAmentmentType
    {
        public int Id { get; set; } // ID (Primary key)
        public string AmendmentType { get; set; } // AmendmentType (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PolicyAmendment> PolicyAmendments { get; set; } // PolicyAmendment.FK_PolicyAmendment_PolicyAmentmentType

        public PolicyAmentmentType()
        {
            PolicyAmendments = new System.Collections.Generic.List<PolicyAmendment>();
        }
    }

    // PolicyDefinition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyDefinition
    {
        public int Id { get; set; } // ID (Primary key)
        public int PolicyTypeId { get; set; } // PolicyTypeID
        public string DefinitionName { get; set; } // DefinitionName (length: 30)
        public int? ProvidorOrUnderWriterId { get; set; } // ProvidorOrUnderWriterID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AddOn> AddOns { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Policy> Policies { get; set; } // Policy.FK_Policy_PolicyDefinition
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Many to many mapping

        // Foreign keys
        public virtual PolicyType PolicyType { get; set; } // FK_PolicyDefinition_PolicyType
        public virtual Provider Provider { get; set; } // FK_PolicyDefinition_Provider

        public PolicyDefinition()
        {
            Policies = new System.Collections.Generic.List<Policy>();
            AddOns = new System.Collections.Generic.List<AddOn>();
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // PolicyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyType
    {
        public int Id { get; set; } // ID (Primary key)
        public string PolicyTypeName { get; set; } // PolicyTypeName (length: 30)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PolicyDefinition> PolicyDefinitions { get; set; } // PolicyDefinition.FK_PolicyDefinition_PolicyType

        public PolicyType()
        {
            PolicyDefinitions = new System.Collections.Generic.List<PolicyDefinition>();
        }
    }

    // Provider
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Provider
    {
        public int Id { get; set; } // ID (Primary key)
        public string ProviderName { get; set; } // ProviderName (length: 30)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AddOn> AddOns { get; set; } // AddOn.FK_AddOn_Provider
        public virtual System.Collections.Generic.ICollection<PolicyDefinition> PolicyDefinitions { get; set; } // PolicyDefinition.FK_PolicyDefinition_Provider

        public Provider()
        {
            AddOns = new System.Collections.Generic.List<AddOn>();
            PolicyDefinitions = new System.Collections.Generic.List<PolicyDefinition>();
        }
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Question
    {
        public int Id { get; set; } // ID (Primary key)
        public string QuestionText { get; set; } // QuestionText
        public int QuestionTypeId { get; set; } // QuestionTypeID

        ///<summary>
        /// 0 - No rating effect : 1 rating factor must be applied
        ///</summary>
        public string RatingEffect { get; set; } // RatingEffect (length: 10)
        public string QuestionHint { get; set; } // QuestionHint
        public int? GuiId { get; set; } // GuiID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Answer> Answers { get; set; } // Answer.FK_Answer_Question
        public virtual System.Collections.Generic.ICollection<PolicyAmendment> PolicyAmendments { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<PolicyDefinition> PolicyDefinitions { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<QuestionRange> QuestionRanges { get; set; } // Many to many mapping

        // Foreign keys
        public virtual QuestionType QuestionType { get; set; } // FK_Question_QuestionType

        public Question()
        {
            Answers = new System.Collections.Generic.List<Answer>();
            QuestionMultipleChoiceGroups = new System.Collections.Generic.List<QuestionMultipleChoiceGroup>();
            PolicyDefinitions = new System.Collections.Generic.List<PolicyDefinition>();
            PolicyAmendments = new System.Collections.Generic.List<PolicyAmendment>();
            QuestionRanges = new System.Collections.Generic.List<QuestionRange>();
        }
    }

    // QuestionMultiChoice
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionMultiChoice
    {
        public int Id { get; set; } // ID (Primary key)
        public string Choice { get; set; } // Choice (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; } // Many to many mapping

        public QuestionMultiChoice()
        {
            QuestionMultipleChoiceGroups = new System.Collections.Generic.List<QuestionMultipleChoiceGroup>();
        }
    }

    // QuestionMultipleChoiceGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionMultipleChoiceGroup
    {
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public int QuestionMultipleChoiceId { get; set; } // QuestionMultipleChoiceID (Primary key)

        // Foreign keys
        public virtual Question Question { get; set; } // FK_QuestionMultipleChoiceGroup_Question
        public virtual QuestionMultiChoice QuestionMultiChoice { get; set; } // FK_QuestionMultipleChoiceGroup_QuestionMultiChoice
    }

    // QuestionRange
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionRange
    {
        public int Id { get; set; } // ID (Primary key)
        public string RangeStart { get; set; } // RangeStart (length: 50)
        public string RangeEnd { get; set; } // RangeEnd (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Answer> Answers { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Many to many mapping

        public QuestionRange()
        {
            Answers = new System.Collections.Generic.List<Answer>();
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // QuestionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionType
    {
        public int Id { get; set; } // ID (Primary key)

        ///<summary>
        /// Possibly a free text answer
        ///</summary>
        public string QuiestionTypeName { get; set; } // QuiestionTypeName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Question> Questions { get; set; } // Question.FK_Question_QuestionType

        public QuestionType()
        {
            Questions = new System.Collections.Generic.List<Question>();
        }
    }

    // RatingBaseRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingBaseRate
    {
        public int Id { get; set; } // ID (Primary key)
        public int ProviderId { get; set; } // ProviderID
        public System.DateTime ValidFrom { get; set; } // ValidFrom
        public System.DateTime? ValidTo { get; set; } // ValidTo
        public decimal BaseRate { get; set; } // BaseRate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RatingFactor> RatingFactors { get; set; } // RatingFactor.FK_RatingFactor_RatingBaseRate

        public RatingBaseRate()
        {
            ValidFrom = System.DateTime.Now;
            RatingFactors = new System.Collections.Generic.List<RatingFactor>();
        }
    }

    // RatingFactor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingFactor
    {
        public int Id { get; set; } // ID (Primary key)

        ///<summary>
        /// 1 = * : 2 = + : 3  = - : 4 = / :
        ///</summary>
        public int? RatingOperator { get; set; } // RatingOperator
        public decimal? RatingOperand { get; set; } // RatingOperand

        ///<summary>
        /// Rate versioning through this
        ///</summary>
        public int RatingbaseRateId { get; set; } // RatingbaseRateID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; } // Many to many mapping

        // Foreign keys
        public virtual RatingBaseRate RatingBaseRate { get; set; } // FK_RatingFactor_RatingBaseRate

        public RatingFactor()
        {
            RatingOperator = 1;
            RatingFactorOnPolicies = new System.Collections.Generic.List<RatingFactorOnPolicy>();
        }
    }

    // RatingFactorOnPolicy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingFactorOnPolicy
    {
        public int RatingFactorId { get; set; } // RatingFactorID (Primary key)
        public int PolicyId { get; set; } // PolicyID (Primary key)
        public int AnswerId { get; set; } // AnswerID (Primary key)

        // Foreign keys
        public virtual Answer Answer { get; set; } // FK_RatingFactorOnPolicy_Answer
        public virtual Policy Policy { get; set; } // FK_RatingFactorOnPolicy_Policy
        public virtual RatingFactor RatingFactor { get; set; } // FK_RatingFactorOnPolicy_RatingFactor
    }

    // __RefactorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RefactorLog
    {
        public System.Guid OperationKey { get; set; } // OperationKey (Primary key)
    }

    // Salutation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Salutation
    {
        public int Id { get; set; } // ID (Primary key)
        public string Title { get; set; } // Title (length: 30)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person> People { get; set; } // Person.FK_Person_Salutatiion

        public Salutation()
        {
            People = new System.Collections.Generic.List<Person>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // TargetSystem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TargetSystem
    {
        public int Id { get; set; } // ID (Primary key)
        public string SystemName { get; set; } // SystemName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PersonLogin> PersonLogins { get; set; } // Many to many mapping

        public TargetSystem()
        {
            PersonLogins = new System.Collections.Generic.List<PersonLogin>();
        }
    }

    // Town
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Town
    {
        public int Id { get; set; } // ID (Primary key)
        public string TownName { get; set; } // TownName (length: 20)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Address> Addresses { get; set; } // Address.FK_Address_City
        public virtual System.Collections.Generic.ICollection<Country> Countries { get; set; } // Many to many mapping

        public Town()
        {
            Addresses = new System.Collections.Generic.List<Address>();
            Countries = new System.Collections.Generic.List<Country>();
        }
    }

    #endregion

    #region POCO Configuration

    // AddOn
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddOnConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddOn>
    {
        public AddOnConfiguration()
            : this("dbo")
        {
        }

        public AddOnConfiguration(string schema)
        {
            ToTable("AddOn", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddOnName).HasColumnName(@"AddOnName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.OneOffCost).HasColumnName(@"OneOffCost").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.PercentPerPersonOrItemCovered).HasColumnName(@"PercentPerPersonOrItemCovered").IsOptional().HasColumnType("decimal").HasPrecision(2,2);
            Property(x => x.PercentagePerPremium).HasColumnName(@"PercentagePerPremium").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.PercentagePayableCommision).HasColumnName(@"PercentagePayableCommision").IsOptional().HasColumnType("decimal").HasPrecision(2,2);
            Property(x => x.ProviderId).HasColumnName(@"ProviderID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Provider).WithMany(b => b.AddOns).HasForeignKey(c => c.ProviderId).WillCascadeOnDelete(false); // FK_AddOn_Provider
            HasMany(t => t.PolicyDefinitions).WithMany(t => t.AddOns).Map(m =>
            {
                m.ToTable("PolicyAddOnAvailable", "dbo");
                m.MapLeftKey("AddonID");
                m.MapRightKey("PolicyID");
            });
            HasMany(t => t.Policies).WithMany(t => t.AddOns).Map(m =>
            {
                m.ToTable("PolicyAddOnPurchased", "dbo");
                m.MapLeftKey("AddOnID");
                m.MapRightKey("PolicyID");
            });
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Address>
    {
        public AddressConfiguration()
            : this("dbo")
        {
        }

        public AddressConfiguration(string schema)
        {
            ToTable("Address", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(60);
            Property(x => x.CityId).HasColumnName(@"CityID").IsRequired().HasColumnType("int");
            Property(x => x.CountyId).HasColumnName(@"CountyID").IsRequired().HasColumnType("int");
            Property(x => x.CountryId).HasColumnName(@"CountryID").IsRequired().HasColumnType("int");
            Property(x => x.PostCode).HasColumnName(@"PostCode").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.SpatialLocation).HasColumnName(@"SpatialLocation").IsOptional().HasColumnType("geography");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);

            // Foreign keys
            HasRequired(a => a.Country).WithMany(b => b.Addresses).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // FK_Address_Country
            HasRequired(a => a.County).WithMany(b => b.Addresses).HasForeignKey(c => c.CountyId).WillCascadeOnDelete(false); // FK_Address_County
            HasRequired(a => a.Town).WithMany(b => b.Addresses).HasForeignKey(c => c.CityId).WillCascadeOnDelete(false); // FK_Address_City
            HasMany(t => t.Policies).WithMany(t => t.Addresses).Map(m =>
            {
                m.ToTable("AddressOnPolicy", "dbo");
                m.MapLeftKey("AddressID");
                m.MapRightKey("PolicyID");
            });
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AddressType>
    {
        public AddressTypeConfiguration()
            : this("dbo")
        {
        }

        public AddressTypeConfiguration(string schema)
        {
            ToTable("AddressType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AddressTypeName).HasColumnName(@"AddressTypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // Answer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Answer>
    {
        public AnswerConfiguration()
            : this("dbo")
        {
        }

        public AnswerConfiguration(string schema)
        {
            ToTable("Answer", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnswerAsString).HasColumnName(@"AnswerAsString").IsRequired().IsUnicode(false).HasColumnType("varchar(max)");
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.Answers).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_Answer_Question
            HasMany(t => t.QuestionRanges).WithMany(t => t.Answers).Map(m =>
            {
                m.ToTable("AnswerRangeGroup", "dbo");
                m.MapLeftKey("AnswerID");
                m.MapRightKey("QuestionRangeID");
            });
            HasMany(t => t.Policies).WithMany(t => t.Answers).Map(m =>
            {
                m.ToTable("PolicyAnswer", "dbo");
                m.MapLeftKey("AnswerID");
                m.MapRightKey("PolicyID");
            });
        }
    }

    // CommunicationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CommunicationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommunicationType>
    {
        public CommunicationTypeConfiguration()
            : this("dbo")
        {
        }

        public CommunicationTypeConfiguration(string schema)
        {
            ToTable("CommunicationType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CommsTypeName).HasColumnName(@"CommsTypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // Country
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Country>
    {
        public CountryConfiguration()
            : this("dbo")
        {
        }

        public CountryConfiguration(string schema)
        {
            ToTable("Country", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CountryName).HasColumnName(@"CountryName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.CountryCode).HasColumnName(@"CountryCode").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            HasMany(t => t.Towns).WithMany(t => t.Countries).Map(m =>
            {
                m.ToTable("TownInCounty", "dbo");
                m.MapLeftKey("CountyID");
                m.MapRightKey("TownID");
            });
        }
    }

    // CountryInRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CountryInRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryInRegion>
    {
        public CountryInRegionConfiguration()
            : this("dbo")
        {
        }

        public CountryInRegionConfiguration(string schema)
        {
            ToTable("CountryInRegion", schema);
            HasKey(x => new { x.GlobalRegionId, x.CountryId, x.RegionSetId });

            Property(x => x.GlobalRegionId).HasColumnName(@"GlobalRegionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RegionSetId).HasColumnName(@"RegionSetID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Country).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // FK_CountryInRegion_Country
            HasRequired(a => a.GlobalRegion).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.GlobalRegionId).WillCascadeOnDelete(false); // FK_CountryInRegion_GlobalRegion
            HasRequired(a => a.GlobalRegionSet).WithMany(b => b.CountryInRegions).HasForeignKey(c => c.RegionSetId).WillCascadeOnDelete(false); // FK_CountryInRegion_GlobalRegionSet
        }
    }

    // County
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CountyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<County>
    {
        public CountyConfiguration()
            : this("dbo")
        {
        }

        public CountyConfiguration(string schema)
        {
            ToTable("County", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CountyName).HasColumnName(@"CountyName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // CustomerCommunication
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CustomerCommunicationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CustomerCommunication>
    {
        public CustomerCommunicationConfiguration()
            : this("dbo")
        {
        }

        public CustomerCommunicationConfiguration(string schema)
        {
            ToTable("CustomerCommunication", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EmailAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailAddress>
    {
        public EmailAddressConfiguration()
            : this("dbo")
        {
        }

        public EmailAddressConfiguration(string schema)
        {
            ToTable("EmailAddress", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress_).HasColumnName(@"EmailAddress").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // EmailAddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EmailAddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailAddressType>
    {
        public EmailAddressTypeConfiguration()
            : this("dbo")
        {
        }

        public EmailAddressTypeConfiguration(string schema)
        {
            ToTable("EmailAddressType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddresstypeName).HasColumnName(@"EmailAddresstypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
        }
    }

    // GlobalRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GlobalRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GlobalRegion>
    {
        public GlobalRegionConfiguration()
            : this("dbo")
        {
        }

        public GlobalRegionConfiguration(string schema)
        {
            ToTable("GlobalRegion", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RegionName).HasColumnName(@"RegionName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
        }
    }

    // GlobalRegionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GlobalRegionSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GlobalRegionSet>
    {
        public GlobalRegionSetConfiguration()
            : this("dbo")
        {
        }

        public GlobalRegionSetConfiguration(string schema)
        {
            ToTable("GlobalRegionSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RegionSetName).HasColumnName(@"RegionSetName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
        }
    }

    // Login
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class LoginConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Login>
    {
        public LoginConfiguration()
            : this("dbo")
        {
        }

        public LoginConfiguration(string schema)
        {
            ToTable("Login", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Login_).HasColumnName(@"Login").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Password>
    {
        public PasswordConfiguration()
            : this("dbo")
        {
        }

        public PasswordConfiguration(string schema)
        {
            ToTable("Password", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Password_).HasColumnName(@"Password").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person>
    {
        public PersonConfiguration()
            : this("dbo")
        {
        }

        public PersonConfiguration(string schema)
        {
            ToTable("Person", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.KnownAs).HasColumnName(@"KnownAs").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().HasColumnType("int");
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.DoB).HasColumnName(@"DoB").IsRequired().HasColumnType("datetime");
            Property(x => x.PostNominalLetters).HasColumnName(@"PostNominalLetters").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.PasswordId).HasColumnName(@"PasswordID").IsOptional().HasColumnType("int");
            Property(x => x.UserName).HasColumnName(@"UserName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Salutation).WithMany(b => b.People).HasForeignKey(c => c.Title).WillCascadeOnDelete(false); // FK_Person_Salutatiion
            HasMany(t => t.Policies).WithMany(t => t.People).Map(m =>
            {
                m.ToTable("AdditionalPersonOnPolicy", "dbo");
                m.MapLeftKey("PersonID");
                m.MapRightKey("PolicyId");
            });
        }
    }

    // PersonAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonAddress>
    {
        public PersonAddressConfiguration()
            : this("dbo")
        {
        }

        public PersonAddressConfiguration(string schema)
        {
            ToTable("PersonAddress", schema);
            HasKey(x => new { x.PersonId, x.AddressId, x.AddressTypeId });

            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Address).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.AddressId).WillCascadeOnDelete(false); // FK_PersonAddress_Address
            HasRequired(a => a.AddressType).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_PersonAddress_AddressType
            HasRequired(a => a.Person).WithMany(b => b.PersonAddresses).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonAddress_Person
        }
    }

    // PersonEmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonEmailAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonEmailAddress>
    {
        public PersonEmailAddressConfiguration()
            : this("dbo")
        {
        }

        public PersonEmailAddressConfiguration(string schema)
        {
            ToTable("PersonEmailAddress", schema);
            HasKey(x => new { x.EmailAddressId, x.PersonId, x.EmailAddressTypeId });

            Property(x => x.EmailAddressId).HasColumnName(@"EmailAddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddressTypeId).HasColumnName(@"EmailAddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.EmailAddress).WithMany(b => b.PersonEmailAddresses).HasForeignKey(c => c.EmailAddressId).WillCascadeOnDelete(false); // FK_PersonEmailAddress_EmailAddress
            HasRequired(a => a.EmailAddressType).WithMany(b => b.PersonEmailAddresses).HasForeignKey(c => c.EmailAddressTypeId).WillCascadeOnDelete(false); // FK_PersonEmailAddress_EmailAddressType
            HasRequired(a => a.Person).WithMany(b => b.PersonEmailAddresses).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonEmailAddress_Person
        }
    }

    // PersonLogin
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonLoginConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonLogin>
    {
        public PersonLoginConfiguration()
            : this("dbo")
        {
        }

        public PersonLoginConfiguration(string schema)
        {
            ToTable("PersonLogin", schema);
            HasKey(x => new { x.PersonId, x.LoginId, x.TargetSystemId });

            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LoginId).HasColumnName(@"LoginID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TargetSystemId).HasColumnName(@"targetSystemID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Login).WithMany(b => b.PersonLogins).HasForeignKey(c => c.LoginId).WillCascadeOnDelete(false); // FK_PersonLogin_Login
            HasRequired(a => a.Person).WithMany(b => b.PersonLogins).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonLogin_Person
            HasRequired(a => a.TargetSystem).WithMany(b => b.PersonLogins).HasForeignKey(c => c.TargetSystemId).WillCascadeOnDelete(false); // FK_PersonLogin_TargetSystem
        }
    }

    // PersonPassword
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonPasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonPassword>
    {
        public PersonPasswordConfiguration()
            : this("dbo")
        {
        }

        public PersonPasswordConfiguration(string schema)
        {
            ToTable("PersonPassword", schema);
            HasKey(x => new { x.PersonId, x.PasswordId, x.TargetSystemId });

            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PasswordId).HasColumnName(@"PasswordID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TargetSystemId).HasColumnName(@"TargetSystemID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Password).WithMany(b => b.PersonPasswords).HasForeignKey(c => c.PasswordId).WillCascadeOnDelete(false); // FK_PersonPassword_Password
            HasRequired(a => a.Person).WithMany(b => b.PersonPasswords).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonPassword_Person
        }
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PersonPhoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PersonPhone>
    {
        public PersonPhoneConfiguration()
            : this("dbo")
        {
        }

        public PersonPhoneConfiguration(string schema)
        {
            ToTable("PersonPhone", schema);
            HasKey(x => new { x.PersonId, x.PhoneNumberId, x.PhoneNumberTypeId });

            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumberId).HasColumnName(@"PhoneNumberID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Person).WithMany(b => b.PersonPhones).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_PersonPhone_Person
            HasRequired(a => a.PhoneNumber).WithMany(b => b.PersonPhones).HasForeignKey(c => c.PhoneNumberId).WillCascadeOnDelete(false); // FK_PersonPhone_PhoneNumber
            HasRequired(a => a.PhoneNumberType).WithMany(b => b.PersonPhones).HasForeignKey(c => c.PhoneNumberTypeId).WillCascadeOnDelete(false); // FK_PersonPhone_PhoneNumberType
        }
    }

    // PhoneNumber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PhoneNumberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhoneNumber>
    {
        public PhoneNumberConfiguration()
            : this("dbo")
        {
        }

        public PhoneNumberConfiguration(string schema)
        {
            ToTable("PhoneNumber", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PhoneNumber_).HasColumnName(@"PhoneNumber").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PhoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PhoneNumberType>
    {
        public PhoneNumberTypeConfiguration()
            : this("dbo")
        {
        }

        public PhoneNumberTypeConfiguration(string schema)
        {
            ToTable("PhoneNumberType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PhoneNumberTypeName).HasColumnName(@"PhoneNumberTypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // Policy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Policy>
    {
        public PolicyConfiguration()
            : this("dbo")
        {
        }

        public PolicyConfiguration(string schema)
        {
            ToTable("Policy", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PurchaserId).HasColumnName(@"PurchaserID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("date");
            Property(x => x.DurationInDays).HasColumnName(@"DurationInDays").IsOptional().HasColumnType("int");
            Property(x => x.QuoteDate).HasColumnName(@"QuoteDate").IsRequired().HasColumnType("date");
            Property(x => x.PolicyDefinitionId).HasColumnName(@"PolicyDefinitionID").IsRequired().HasColumnType("int");
            Property(x => x.Premium).HasColumnName(@"Premium").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.PolicyAutoRenew).HasColumnName(@"PolicyAutoRenew").IsRequired().HasColumnType("bit");
            Property(x => x.SoldById).HasColumnName(@"SoldByID").IsRequired().HasColumnType("int");
            Property(x => x.SnailMail).HasColumnName(@"SnailMail").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.PolicyDefinition).WithMany(b => b.Policies).HasForeignKey(c => c.PolicyDefinitionId).WillCascadeOnDelete(false); // FK_Policy_PolicyDefinition
        }
    }

    // PolicyAmendment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyAmendmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PolicyAmendment>
    {
        public PolicyAmendmentConfiguration()
            : this("dbo")
        {
        }

        public PolicyAmendmentConfiguration(string schema)
        {
            ToTable("PolicyAmendment", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyId).HasColumnName(@"PolicyID").IsRequired().HasColumnType("int");
            Property(x => x.AmendmentDate).HasColumnName(@"AmendmentDate").IsRequired().HasColumnType("date");
            Property(x => x.AmendmentTypeId).HasColumnName(@"AmendmentTypeID").IsRequired().HasColumnType("int");
            Property(x => x.PreviousPremium).HasColumnName(@"PreviousPremium").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.AmmendedById).HasColumnName(@"AmmendedByID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Policy).WithMany(b => b.PolicyAmendments).HasForeignKey(c => c.PolicyId).WillCascadeOnDelete(false); // FK_PolicyAmendment_Policy
            HasRequired(a => a.PolicyAmentmentType).WithMany(b => b.PolicyAmendments).HasForeignKey(c => c.AmendmentTypeId).WillCascadeOnDelete(false); // FK_PolicyAmendment_PolicyAmentmentType
            HasMany(t => t.Questions).WithMany(t => t.PolicyAmendments).Map(m =>
            {
                m.ToTable("QuestionAmended", "dbo");
                m.MapLeftKey("PolicyAmendmentID");
                m.MapRightKey("QuestionID");
            });
        }
    }

    // PolicyAmentmentType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyAmentmentTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PolicyAmentmentType>
    {
        public PolicyAmentmentTypeConfiguration()
            : this("dbo")
        {
        }

        public PolicyAmentmentTypeConfiguration(string schema)
        {
            ToTable("PolicyAmentmentType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AmendmentType).HasColumnName(@"AmendmentType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // PolicyDefinition
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyDefinitionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PolicyDefinition>
    {
        public PolicyDefinitionConfiguration()
            : this("dbo")
        {
        }

        public PolicyDefinitionConfiguration(string schema)
        {
            ToTable("PolicyDefinition", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyTypeId).HasColumnName(@"PolicyTypeID").IsRequired().HasColumnType("int");
            Property(x => x.DefinitionName).HasColumnName(@"DefinitionName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.ProvidorOrUnderWriterId).HasColumnName(@"ProvidorOrUnderWriterID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Provider).WithMany(b => b.PolicyDefinitions).HasForeignKey(c => c.ProvidorOrUnderWriterId).WillCascadeOnDelete(false); // FK_PolicyDefinition_Provider
            HasRequired(a => a.PolicyType).WithMany(b => b.PolicyDefinitions).HasForeignKey(c => c.PolicyTypeId).WillCascadeOnDelete(false); // FK_PolicyDefinition_PolicyType
            HasMany(t => t.Questions).WithMany(t => t.PolicyDefinitions).Map(m =>
            {
                m.ToTable("PolicyQuestion", "dbo");
                m.MapLeftKey("PolicyDefinitionID");
                m.MapRightKey("QuestionID");
            });
        }
    }

    // PolicyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class PolicyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PolicyType>
    {
        public PolicyTypeConfiguration()
            : this("dbo")
        {
        }

        public PolicyTypeConfiguration(string schema)
        {
            ToTable("PolicyType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyTypeName).HasColumnName(@"PolicyTypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
        }
    }

    // Provider
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ProviderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Provider>
    {
        public ProviderConfiguration()
            : this("dbo")
        {
        }

        public ProviderConfiguration(string schema)
        {
            ToTable("Provider", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProviderName).HasColumnName(@"ProviderName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
        }
    }

    // Question
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Question>
    {
        public QuestionConfiguration()
            : this("dbo")
        {
        }

        public QuestionConfiguration(string schema)
        {
            ToTable("Question", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionText).HasColumnName(@"QuestionText").IsRequired().IsUnicode(false).HasColumnType("varchar(max)");
            Property(x => x.QuestionTypeId).HasColumnName(@"QuestionTypeID").IsRequired().HasColumnType("int");
            Property(x => x.RatingEffect).HasColumnName(@"RatingEffect").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.QuestionHint).HasColumnName(@"QuestionHint").IsOptional().IsUnicode(false).HasColumnType("varchar(max)");
            Property(x => x.GuiId).HasColumnName(@"GuiID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.QuestionType).WithMany(b => b.Questions).HasForeignKey(c => c.QuestionTypeId).WillCascadeOnDelete(false); // FK_Question_QuestionType
        }
    }

    // QuestionMultiChoice
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionMultiChoiceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionMultiChoice>
    {
        public QuestionMultiChoiceConfiguration()
            : this("dbo")
        {
        }

        public QuestionMultiChoiceConfiguration(string schema)
        {
            ToTable("QuestionMultiChoice", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Choice).HasColumnName(@"Choice").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
        }
    }

    // QuestionMultipleChoiceGroup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionMultipleChoiceGroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionMultipleChoiceGroup>
    {
        public QuestionMultipleChoiceGroupConfiguration()
            : this("dbo")
        {
        }

        public QuestionMultipleChoiceGroupConfiguration(string schema)
        {
            ToTable("QuestionMultipleChoiceGroup", schema);
            HasKey(x => new { x.QuestionId, x.QuestionMultipleChoiceId });

            Property(x => x.QuestionId).HasColumnName(@"QuestionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionMultipleChoiceId).HasColumnName(@"QuestionMultipleChoiceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.QuestionMultipleChoiceGroups).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_QuestionMultipleChoiceGroup_Question
            HasRequired(a => a.QuestionMultiChoice).WithMany(b => b.QuestionMultipleChoiceGroups).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_QuestionMultipleChoiceGroup_QuestionMultiChoice
        }
    }

    // QuestionRange
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionRangeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionRange>
    {
        public QuestionRangeConfiguration()
            : this("dbo")
        {
        }

        public QuestionRangeConfiguration(string schema)
        {
            ToTable("QuestionRange", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RangeStart).HasColumnName(@"RangeStart").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.RangeEnd).HasColumnName(@"RangeEnd").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            HasMany(t => t.Questions).WithMany(t => t.QuestionRanges).Map(m =>
            {
                m.ToTable("QuestionRangeGroup", "dbo");
                m.MapLeftKey("QuestionangeID");
                m.MapRightKey("QuestionID");
            });
        }
    }

    // QuestionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class QuestionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionType>
    {
        public QuestionTypeConfiguration()
            : this("dbo")
        {
        }

        public QuestionTypeConfiguration(string schema)
        {
            ToTable("QuestionType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuiestionTypeName).HasColumnName(@"QuiestionTypeName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // RatingBaseRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingBaseRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RatingBaseRate>
    {
        public RatingBaseRateConfiguration()
            : this("dbo")
        {
        }

        public RatingBaseRateConfiguration(string schema)
        {
            ToTable("RatingBaseRate", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProviderId).HasColumnName(@"ProviderID").IsRequired().HasColumnType("int");
            Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").IsRequired().HasColumnType("datetime");
            Property(x => x.ValidTo).HasColumnName(@"ValidTo").IsOptional().HasColumnType("datetime");
            Property(x => x.BaseRate).HasColumnName(@"BaseRate").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
        }
    }

    // RatingFactor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingFactorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RatingFactor>
    {
        public RatingFactorConfiguration()
            : this("dbo")
        {
        }

        public RatingFactorConfiguration(string schema)
        {
            ToTable("RatingFactor", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RatingOperator).HasColumnName(@"RatingOperator").IsOptional().HasColumnType("int");
            Property(x => x.RatingOperand).HasColumnName(@"RatingOperand").IsOptional().HasColumnType("decimal").HasPrecision(4,4);
            Property(x => x.RatingbaseRateId).HasColumnName(@"RatingbaseRateID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.RatingBaseRate).WithMany(b => b.RatingFactors).HasForeignKey(c => c.RatingbaseRateId).WillCascadeOnDelete(false); // FK_RatingFactor_RatingBaseRate
        }
    }

    // RatingFactorOnPolicy
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RatingFactorOnPolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RatingFactorOnPolicy>
    {
        public RatingFactorOnPolicyConfiguration()
            : this("dbo")
        {
        }

        public RatingFactorOnPolicyConfiguration(string schema)
        {
            ToTable("RatingFactorOnPolicy", schema);
            HasKey(x => new { x.AnswerId, x.PolicyId, x.RatingFactorId });

            Property(x => x.RatingFactorId).HasColumnName(@"RatingFactorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyId).HasColumnName(@"PolicyID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnswerId).HasColumnName(@"AnswerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            HasRequired(a => a.Answer).WithMany(b => b.RatingFactorOnPolicies).HasForeignKey(c => c.AnswerId).WillCascadeOnDelete(false); // FK_RatingFactorOnPolicy_Answer
            HasRequired(a => a.Policy).WithMany(b => b.RatingFactorOnPolicies).HasForeignKey(c => c.PolicyId).WillCascadeOnDelete(false); // FK_RatingFactorOnPolicy_Policy
            HasRequired(a => a.RatingFactor).WithMany(b => b.RatingFactorOnPolicies).HasForeignKey(c => c.RatingFactorId).WillCascadeOnDelete(false); // FK_RatingFactorOnPolicy_RatingFactor
        }
    }

    // __RefactorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RefactorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RefactorLog>
    {
        public RefactorLogConfiguration()
            : this("dbo")
        {
        }

        public RefactorLogConfiguration(string schema)
        {
            ToTable("__RefactorLog", schema);
            HasKey(x => x.OperationKey);

            Property(x => x.OperationKey).HasColumnName(@"OperationKey").IsRequired().HasColumnType("uniqueidentifier").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Salutation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SalutationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Salutation>
    {
        public SalutationConfiguration()
            : this("dbo")
        {
        }

        public SalutationConfiguration(string schema)
        {
            ToTable("Salutation", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // TargetSystem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TargetSystemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TargetSystem>
    {
        public TargetSystemConfiguration()
            : this("dbo")
        {
        }

        public TargetSystemConfiguration(string schema)
        {
            ToTable("TargetSystem", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SystemName).HasColumnName(@"SystemName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    // Town
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TownConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Town>
    {
        public TownConfiguration()
            : this("dbo")
        {
        }

        public TownConfiguration(string schema)
        {
            ToTable("Town", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TownName).HasColumnName(@"TownName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
        }
    }

    #endregion

}
// </auto-generated>

