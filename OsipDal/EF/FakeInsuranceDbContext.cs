// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace OsipDal.EF
{

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.1.0")]
    public class FakeInsuranceDbContext : IInsuranceDbContext
    {
        public System.Data.Entity.DbSet<AddOn> AddOns { get; set; }
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Answer> Answers { get; set; }
        public System.Data.Entity.DbSet<CommunicationType> CommunicationTypes { get; set; }
        public System.Data.Entity.DbSet<Country> Countries { get; set; }
        public System.Data.Entity.DbSet<CountryInRegion> CountryInRegions { get; set; }
        public System.Data.Entity.DbSet<County> Counties { get; set; }
        public System.Data.Entity.DbSet<CustomerCommunication> CustomerCommunications { get; set; }
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; }
        public System.Data.Entity.DbSet<GlobalRegion> GlobalRegions { get; set; }
        public System.Data.Entity.DbSet<GlobalRegionSet> GlobalRegionSets { get; set; }
        public System.Data.Entity.DbSet<Login> Logins { get; set; }
        public System.Data.Entity.DbSet<Password> Passwords { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; }
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; }
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; }
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Policy> Policies { get; set; }
        public System.Data.Entity.DbSet<PolicyAmendment> PolicyAmendments { get; set; }
        public System.Data.Entity.DbSet<PolicyAmentmentType> PolicyAmentmentTypes { get; set; }
        public System.Data.Entity.DbSet<PolicyDefinition> PolicyDefinitions { get; set; }
        public System.Data.Entity.DbSet<PolicyType> PolicyTypes { get; set; }
        public System.Data.Entity.DbSet<Provider> Providers { get; set; }
        public System.Data.Entity.DbSet<Question> Questions { get; set; }
        public System.Data.Entity.DbSet<QuestionMultiChoice> QuestionMultiChoices { get; set; }
        public System.Data.Entity.DbSet<QuestionMultipleChoiceGroup> QuestionMultipleChoiceGroups { get; set; }
        public System.Data.Entity.DbSet<QuestionRange> QuestionRanges { get; set; }
        public System.Data.Entity.DbSet<QuestionType> QuestionTypes { get; set; }
        public System.Data.Entity.DbSet<RatingBaseRate> RatingBaseRates { get; set; }
        public System.Data.Entity.DbSet<RatingFactor> RatingFactors { get; set; }
        public System.Data.Entity.DbSet<RatingFactorOnPolicy> RatingFactorOnPolicies { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }
        public System.Data.Entity.DbSet<Salutation> Salutations { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; }
        public System.Data.Entity.DbSet<Town> Towns { get; set; }

        public FakeInsuranceDbContext()
        {
            AddOns = new FakeDbSet<AddOn>("Id");
            Addresses = new FakeDbSet<Address>("Id");
            AddressTypes = new FakeDbSet<AddressType>("Id");
            Answers = new FakeDbSet<Answer>("Id");
            CommunicationTypes = new FakeDbSet<CommunicationType>("Id");
            Countries = new FakeDbSet<Country>("Id");
            CountryInRegions = new FakeDbSet<CountryInRegion>("GlobalRegionId", "CountryId", "RegionSetId");
            Counties = new FakeDbSet<County>("Id");
            CustomerCommunications = new FakeDbSet<CustomerCommunication>("Id");
            EmailAddresses = new FakeDbSet<EmailAddress>("Id");
            EmailAddressTypes = new FakeDbSet<EmailAddressType>("Id");
            GlobalRegions = new FakeDbSet<GlobalRegion>("Id");
            GlobalRegionSets = new FakeDbSet<GlobalRegionSet>("Id");
            Logins = new FakeDbSet<Login>("Id");
            Passwords = new FakeDbSet<Password>("Id");
            People = new FakeDbSet<Person>("Id");
            PersonAddresses = new FakeDbSet<PersonAddress>("PersonId", "AddressId", "AddressTypeId");
            PersonEmailAddresses = new FakeDbSet<PersonEmailAddress>("EmailAddressId", "PersonId", "EmailAddressTypeId");
            PersonLogins = new FakeDbSet<PersonLogin>("PersonId", "LoginId", "TargetSystemId");
            PersonPasswords = new FakeDbSet<PersonPassword>("PersonId", "PasswordId", "TargetSystemId");
            PersonPhones = new FakeDbSet<PersonPhone>("PersonId", "PhoneNumberId", "PhoneNumberTypeId");
            PhoneNumbers = new FakeDbSet<PhoneNumber>("Id");
            PhoneNumberTypes = new FakeDbSet<PhoneNumberType>("Id");
            Policies = new FakeDbSet<Policy>("Id");
            PolicyAmendments = new FakeDbSet<PolicyAmendment>("Id");
            PolicyAmentmentTypes = new FakeDbSet<PolicyAmentmentType>("Id");
            PolicyDefinitions = new FakeDbSet<PolicyDefinition>("Id");
            PolicyTypes = new FakeDbSet<PolicyType>("Id");
            Providers = new FakeDbSet<Provider>("Id");
            Questions = new FakeDbSet<Question>("Id");
            QuestionMultiChoices = new FakeDbSet<QuestionMultiChoice>("Id");
            QuestionMultipleChoiceGroups = new FakeDbSet<QuestionMultipleChoiceGroup>("QuestionId", "QuestionMultipleChoiceId");
            QuestionRanges = new FakeDbSet<QuestionRange>("Id");
            QuestionTypes = new FakeDbSet<QuestionType>("Id");
            RatingBaseRates = new FakeDbSet<RatingBaseRate>("Id");
            RatingFactors = new FakeDbSet<RatingFactor>("Id");
            RatingFactorOnPolicies = new FakeDbSet<RatingFactorOnPolicy>("AnswerId", "PolicyId", "RatingFactorId");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
            Salutations = new FakeDbSet<Salutation>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TargetSystems = new FakeDbSet<TargetSystem>("Id");
            Towns = new FakeDbSet<Town>("Id");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }
}
// </auto-generated>
