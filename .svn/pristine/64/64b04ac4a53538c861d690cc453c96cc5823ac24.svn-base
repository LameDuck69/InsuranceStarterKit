// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace OsipDal.EF
{

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.1.0")]
    public class FakeOsipDbContext : IOsipDbContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; }
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; }
        public System.Data.Entity.DbSet<City> Cities { get; set; }
        public System.Data.Entity.DbSet<Country> Countries { get; set; }
        public System.Data.Entity.DbSet<County> Counties { get; set; }
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; }
        public System.Data.Entity.DbSet<Login> Logins { get; set; }
        public System.Data.Entity.DbSet<Password> Passwords { get; set; }
        public System.Data.Entity.DbSet<Person> People { get; set; }
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; }
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; }
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; }
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; }
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; }

        public FakeOsipDbContext()
        {
            Addresses = new FakeDbSet<Address>("AddressId");
            AddressTypes = new FakeDbSet<AddressType>("AddressTypeId");
            Cities = new FakeDbSet<City>("CityId");
            Countries = new FakeDbSet<Country>("CountryId");
            Counties = new FakeDbSet<County>("CountyId");
            EmailAddresses = new FakeDbSet<EmailAddress>("EmailAddressId");
            EmailAddressTypes = new FakeDbSet<EmailAddressType>("EmailAddressTypeId");
            Logins = new FakeDbSet<Login>("LoginId");
            Passwords = new FakeDbSet<Password>("PasswordId");
            People = new FakeDbSet<Person>("PersonId");
            PersonAddresses = new FakeDbSet<PersonAddress>("PersonId", "AddressId", "AddressTypeId");
            PersonEmailAddresses = new FakeDbSet<PersonEmailAddress>("EmailAddressId", "PersonId", "EmailAddressTypeId");
            PersonLogins = new FakeDbSet<PersonLogin>("PersonId", "LoginId", "TargetSystemId");
            PersonPasswords = new FakeDbSet<PersonPassword>("PersonId", "PasswordId", "TargetSystemId");
            PersonPhones = new FakeDbSet<PersonPhone>("PersonId", "PhoneNumberId", "PhoneNumberTypeId");
            PhoneNumbers = new FakeDbSet<PhoneNumber>("PhoneNumberId");
            PhoneNumberTypes = new FakeDbSet<PhoneNumberType>("PhoneNumberTypeId");
            RefactorLogs = new FakeDbSet<RefactorLog>("OperationKey");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TargetSystems = new FakeDbSet<TargetSystem>("TagetSystemId");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }
}
// </auto-generated>
