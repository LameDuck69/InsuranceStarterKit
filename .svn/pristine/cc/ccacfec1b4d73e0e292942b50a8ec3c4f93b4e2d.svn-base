// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace OsipDal.EF
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.1.0")]
    public class OsipDbContext : System.Data.Entity.DbContext, IOsipDbContext
    {
        public System.Data.Entity.DbSet<Address> Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<AddressType> AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<City> Cities { get; set; } // City
        public System.Data.Entity.DbSet<T> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<County> Counties { get; set; } // County
        public System.Data.Entity.DbSet<EmailAddress> EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<EmailAddressType> EmailAddressTypes { get; set; } // EmailAddressType
        public System.Data.Entity.DbSet<Login> Logins { get; set; } // Login
        public System.Data.Entity.DbSet<Password> Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person> People { get; set; } // Person
        public System.Data.Entity.DbSet<PersonAddress> PersonAddresses { get; set; } // PersonAddress
        public System.Data.Entity.DbSet<PersonEmailAddress> PersonEmailAddresses { get; set; } // PersonEmailAddress
        public System.Data.Entity.DbSet<PersonLogin> PersonLogins { get; set; } // PersonLogin
        public System.Data.Entity.DbSet<PersonPassword> PersonPasswords { get; set; } // PersonPassword
        public System.Data.Entity.DbSet<PersonPhone> PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<PhoneNumber> PhoneNumbers { get; set; } // PhoneNumber
        public System.Data.Entity.DbSet<PhoneNumberType> PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<RefactorLog> RefactorLogs { get; set; } // __RefactorLog
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TargetSystem> TargetSystems { get; set; } // TargetSystem
        
        static OsipDbContext()
        {
            System.Data.Entity.Database.SetInitializer<OsipDbContext>(null);
        }

        public OsipDbContext()
            : base("Name=Osip")
        {
        }

        public OsipDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public OsipDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public OsipDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public OsipDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AddressConfiguration());
            modelBuilder.Configurations.Add(new AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new CityConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration());
            modelBuilder.Configurations.Add(new LoginConfiguration());
            modelBuilder.Configurations.Add(new PasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration());
            modelBuilder.Configurations.Add(new PersonLoginConfiguration());
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration());
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration());
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new RefactorLogConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TargetSystemConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CityConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountyConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonEmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberConfiguration(schema));
            modelBuilder.Configurations.Add(new PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RefactorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetSystemConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
